{"version":3,"file":"vm.js","sourceRoot":"","sources":["../../vm/vm.ts"],"names":[],"mappings":"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","sourcesContent":["import { memoryUsage } from \"process\"\nimport { arrayBuffer } from \"stream/consumers\"\n\nexport enum REGISTER { \n    R0,\n    R1,\n    R2,\n    R3,\n    PC, // instruction pointer\n    BP, // Stack base \n    SP, // Stack top\n    RA, // Return value\n}\n\nexport type register = { \n    tag: \"reg\"\n    reg: REGISTER\n}\n\nexport function register(reg : REGISTER) : register {\n    return {\n        tag: \"reg\",\n        reg: reg\n    }\n}\n\nexport type imm = {\n    tag: \"imm\"\n    immediate: bigint\n}\n\nexport function imm(n : bigint) : imm {\n    return {\n        tag: \"imm\",\n        immediate: n\n    }\n}\n\nexport type ind = {\n    tag: \"ind\"\n    reg: register\n    displacement: imm\n}\n\nexport function ind(reg: register, displacement : imm) : ind {\n    return {\n        tag: \"ind\",\n        reg: reg,\n        displacement: displacement,\n    }\n}\n\nexport type operand = register | imm | ind\n\n\nexport enum OP {\n    /* BINOP */\n    ADD = \"ADD\",\n    GT = \"GT\",\n    GE = \"GE\",\n    LT = \"LT\",\n    LE = \"LE\",\n    EQ = \"EQ\",\n    NE = \"NE\",\n\n    /* CONTROL FLOW */\n    MOV = 'MOV',\n    BR = 'BR',\n    PUSH = 'PUSH',\n    POP = 'POP',\n    DONE = 'DONE'\n}\n\nexport type instruction = {\n    operation: OP\n    operands: operand[]\n}\n\nconst op_to_string = (op : OP) => op.toLowerCase()\n\nconst imm_to_string = (imm : imm) => imm.immediate.toString()\nconst register_to_string = (r : register) => \n    r.reg === REGISTER.R0 ? \"R0\" : \n    r.reg === REGISTER.R1 ? \"R1\" : \n    r.reg === REGISTER.R2 ? \"R2\" : \n    r.reg === REGISTER.R3 ? \"R3\" : \n    r.reg === REGISTER.PC ? \"PC\" : \n    r.reg === REGISTER.BP ? \"BP\" : \n    r.reg === REGISTER.SP ? \"SP\" : \n    r.reg === REGISTER.RA ? \"RA\" : \"UNSUPPORTED REGISTER\"\n\nconst ind_to_string = (ind : ind) => \n    `[${register_to_string(ind.reg)} + ${imm_to_string(ind.displacement)}]`\n\nconst operand_to_string = (operand : operand) => \n    operand.tag === \"imm\" ? imm_to_string(operand) : \n    operand.tag === \"reg\" ? register_to_string(operand) :\n    operand.tag === \"ind\" ? ind_to_string(operand) : \"UNSUPPORTED OPERAND\"\n\nconst instruction_to_string = (instr : instruction) =>\n    op_to_string(instr.operation) + \" \" + instr.operands.map(operand_to_string).join(\",\")\n\n\nconst REGISTER_COUNT = 8\nconst R0 = register(REGISTER.R0)\nconst R1 = register(REGISTER.R1)\nconst R2 = register(REGISTER.R2)\nconst R3 = register(REGISTER.R3)\nconst PC = register(REGISTER.PC)\nconst BP = register(REGISTER.BP)\nconst SP = register(REGISTER.SP)\nconst RA = register(REGISTER.RA)\n\nconst WORD_SIZE = 8\n\nconst SEGMENT_SIZE = 10\n// .text .heap .stack same size (might want to custom it later)\n// for now .text lives outside of memory\nconst MEMORY_SIZE = SEGMENT_SIZE * 3\nconst MEMORY_BOTTOM = MEMORY_SIZE - 1\nconst STACK_TOP = MEMORY_BOTTOM - SEGMENT_SIZE\n\ntype machine = {\n    registers : BigInt64Array\n    memory: ArrayBuffer\n    builtins: object\n}\n\nlet machine : machine = {\n    registers : new BigInt64Array(REGISTER_COUNT).fill(0n),\n    memory: new ArrayBuffer(MEMORY_SIZE * WORD_SIZE),\n    builtins : {}\n}\n\nfunction read_word(address: bigint) {\n    const view = new DataView(machine.memory)\n    return view.getBigInt64(Number(address))\n}\n\nfunction write_word(address: bigint, value: bigint) {\n    const view = new DataView(machine.memory)\n    view.setBigInt64(Number(address), value)\n}\n\nfunction get_operand_value(operand : operand) : bigint {\n    switch (operand.tag) {\n        case \"imm\": return operand.immediate\n        case \"reg\": return machine.registers[operand.reg]\n        case \"ind\": return read_word(get_operand_value(operand.reg) + get_operand_value(operand.displacement))\n    }\n}\n\nfunction set_operand_value(operand : operand, value : bigint) : void {\n    switch(operand.tag) {\n        case \"imm\": throw Error(\"Immediates has no memory storage\")\n        case \"reg\": machine.registers[operand.reg] = value; break;\n        case \"ind\": write_word(get_operand_value(operand.reg) + get_operand_value(operand.displacement), value); break;\n    }\n}\n\nfunction initialize_machine() { \n    set_operand_value(SP, BigInt(MEMORY_BOTTOM * 8))\n    set_operand_value(BP, BigInt(MEMORY_BOTTOM * 8))\n}\n\ntype binop_fn_ty = (a:bigint, b:bigint) => bigint\n\nfunction apply_binop(fn : binop_fn_ty, instr : instruction) {\n    const dst_op = instr.operands[0]\n    const op1 = instr.operands[1]\n    const op2 = instr.operands[2]\n    const value = fn(get_operand_value(op1), get_operand_value(op2))\n    set_operand_value(dst_op, value)\n}\n\nlet microcode : {[key in OP] : (instr : instruction)=>void} = {\n    ADD: instr => {\n        const fn = (a : bigint, b : bigint) => a + b\n        apply_binop(fn, instr)\n    },\n    GT: instr => {\n        const fn = (a : bigint, b : bigint) => a > b ? 1n : 0n\n        apply_binop(fn, instr)\n    },\n    GE: instr => {\n        const fn = (a : bigint, b : bigint)  => a >= b ? 1n : 0n\n        apply_binop(fn, instr)\n    },\n    LE: instr => {\n        const fn = (a : bigint, b : bigint)  => a <= b ? 1n : 0n\n        apply_binop(fn, instr)\n    },\n    LT: instr => {\n        const fn = (a : bigint, b : bigint)  => a < b ? 1n : 0n\n        apply_binop(fn, instr)\n    },\n    NE: instr => {\n        const fn = (a : bigint, b : bigint)  => a !== b ? 1n : 0n\n        apply_binop(fn, instr)\n    },\n\n    EQ: instr => {\n        const fn = (a : bigint, b : bigint)  => a === b ? 1n : 0n\n        apply_binop(fn, instr)\n    },\n\n    PUSH: instr => {\n        if (get_operand_value(SP) <= STACK_TOP * 8) {\n            throw Error(\"Reached stack top\")\n        }\n        const value = get_operand_value(instr.operands[0])\n        set_operand_value(ind(SP, imm(0n)), value)\n        machine.registers[REGISTER.SP] -= 8n\n    },\n    POP: instr => {\n        machine.registers[REGISTER.SP] += 8n\n        if (get_operand_value(SP) > MEMORY_BOTTOM * 8) {\n            throw Error(\"Reached stack bottom\")\n        }\n        const v = get_operand_value(ind(SP, imm(0n)))\n        set_operand_value(instr.operands[0], v)\n    },\n    MOV: instr => {\n        const dst_op = instr.operands[0]\n        const src_op = instr.operands[1]\n        set_operand_value(dst_op, get_operand_value(src_op))\n    },\n    BR: instr => {\n        if (instr.operands.length > 1) {\n            // conditional branching\n            const is_true =  get_operand_value(instr.operands[0]) === 1n\n            if (is_true) {\n                set_operand_value(PC, get_operand_value(instr.operands[1]))\n            } else {\n                set_operand_value(PC, get_operand_value(instr.operands[2]))\n            }\n        } else if (instr.operands.length === 1) {\n            // unconditional branch\n            set_operand_value(PC, get_operand_value(instr.operands[0]))\n        }\n    },\n    DONE: instr => {},\n}\n\ninitialize_machine();\n\nlet instrs = [\n    {operation: OP.MOV, operands: [R0, imm(0n)]},\n    {operation: OP.MOV, operands: [R1, imm(0n)]},\n    {operation: OP.LT, operands: [R2, R1, imm(100n)]},\n    {operation: OP.BR, operands: [R2, imm(4n), imm(7n)]},\n    {operation: OP.ADD, operands: [R1, R1, imm(1n)]},\n    {operation: OP.ADD, operands: [R0, R1, R0]},\n    {operation: OP.BR, operands: [imm(2n)]},\n    {operation: OP.PUSH, operands: [imm(11n)]},\n    {operation: OP.PUSH, operands: [imm(12n)]},\n    {operation: OP.PUSH, operands: [imm(13n)]},\n    {operation: OP.POP, operands: [R3]},\n    {operation: OP.DONE, operands: []},\n]\n\nconst run = () => {\n    let op = instrs[Number(get_operand_value(PC))]\n    while(op.operation !== OP.DONE) {\n        // console.log(instruction_to_string(op))\n        microcode[op.operation](op)\n        op = instrs[Number(machine.registers[REGISTER.PC]++)];\n    }\n}\n\n\nfunction print_machine() {\n    console.log(machine.registers)\n    const view = new DataView(machine.memory)\n    for (let i=0; i<MEMORY_SIZE;i++){\n        console.log(i*8 + \":\" + view.getBigInt64(i * 8))\n    }\n}\n\ninstrs.forEach((x, i) => {\n    console.log(`${i} : ${instruction_to_string(x)}`)\n})\nrun()\n\nprint_machine()\n\n\n"]}