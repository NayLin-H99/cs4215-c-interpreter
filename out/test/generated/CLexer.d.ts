import { ATN } from "antlr4ts/atn/ATN";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { Vocabulary } from "antlr4ts/Vocabulary";
export declare class CLexer extends Lexer {
    static readonly Auto = 1;
    static readonly Break = 2;
    static readonly Case = 3;
    static readonly Char = 4;
    static readonly Const = 5;
    static readonly Continue = 6;
    static readonly Default = 7;
    static readonly Do = 8;
    static readonly Double = 9;
    static readonly Else = 10;
    static readonly Enum = 11;
    static readonly Extern = 12;
    static readonly Float = 13;
    static readonly For = 14;
    static readonly Goto = 15;
    static readonly If = 16;
    static readonly Inline = 17;
    static readonly Int = 18;
    static readonly Long = 19;
    static readonly Register = 20;
    static readonly Restrict = 21;
    static readonly Return = 22;
    static readonly Short = 23;
    static readonly Signed = 24;
    static readonly Sizeof = 25;
    static readonly Static = 26;
    static readonly Struct = 27;
    static readonly Switch = 28;
    static readonly Typedef = 29;
    static readonly Union = 30;
    static readonly Unsigned = 31;
    static readonly Void = 32;
    static readonly Volatile = 33;
    static readonly While = 34;
    static readonly Alignas = 35;
    static readonly Alignof = 36;
    static readonly Atomic = 37;
    static readonly Bool = 38;
    static readonly Complex = 39;
    static readonly Generic = 40;
    static readonly Imaginary = 41;
    static readonly Noreturn = 42;
    static readonly StaticAssert = 43;
    static readonly ThreadLocal = 44;
    static readonly LeftParen = 45;
    static readonly RightParen = 46;
    static readonly LeftBracket = 47;
    static readonly RightBracket = 48;
    static readonly LeftBrace = 49;
    static readonly RightBrace = 50;
    static readonly Less = 51;
    static readonly LessEqual = 52;
    static readonly Greater = 53;
    static readonly GreaterEqual = 54;
    static readonly LeftShift = 55;
    static readonly RightShift = 56;
    static readonly Plus = 57;
    static readonly PlusPlus = 58;
    static readonly Minus = 59;
    static readonly MinusMinus = 60;
    static readonly Star = 61;
    static readonly Div = 62;
    static readonly Mod = 63;
    static readonly And = 64;
    static readonly Or = 65;
    static readonly AndAnd = 66;
    static readonly OrOr = 67;
    static readonly Caret = 68;
    static readonly Not = 69;
    static readonly Tilde = 70;
    static readonly Question = 71;
    static readonly Colon = 72;
    static readonly Semi = 73;
    static readonly Comma = 74;
    static readonly Assign = 75;
    static readonly StarAssign = 76;
    static readonly DivAssign = 77;
    static readonly ModAssign = 78;
    static readonly PlusAssign = 79;
    static readonly MinusAssign = 80;
    static readonly LeftShiftAssign = 81;
    static readonly RightShiftAssign = 82;
    static readonly AndAssign = 83;
    static readonly XorAssign = 84;
    static readonly OrAssign = 85;
    static readonly Equal = 86;
    static readonly NotEqual = 87;
    static readonly Arrow = 88;
    static readonly Dot = 89;
    static readonly Ellipsis = 90;
    static readonly Identifier = 91;
    static readonly Constant = 92;
    static readonly DigitSequence = 93;
    static readonly StringLiteral = 94;
    static readonly ComplexDefine = 95;
    static readonly IncludeDirective = 96;
    static readonly AsmBlock = 97;
    static readonly LineAfterPreprocessing = 98;
    static readonly LineDirective = 99;
    static readonly PragmaDirective = 100;
    static readonly Whitespace = 101;
    static readonly Newline = 102;
    static readonly BlockComment = 103;
    static readonly LineComment = 104;
    static readonly channelNames: string[];
    static readonly modeNames: string[];
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    get vocabulary(): Vocabulary;
    constructor(input: CharStream);
    get grammarFileName(): string;
    get ruleNames(): string[];
    get serializedATN(): string;
    get channelNames(): string[];
    get modeNames(): string[];
    private static readonly _serializedATNSegments;
    private static readonly _serializedATNSegment0;
    private static readonly _serializedATNSegment1;
    private static readonly _serializedATNSegment2;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static get _ATN(): ATN;
}
