{"version":3,"file":"CListener.js","sourceRoot":"","sources":["../test/parser/CListener.ts"],"names":[],"mappings":";;AAEA,mCAAyC;AA+EzC,MAAqB,SAAU,SAAQ,0BAAiB;CA6rBvD;AA7rBD,4BA6rBC","sourcesContent":["// Generated from ./C.g4 by ANTLR 4.12.0\n\nimport {ParseTreeListener} from \"antlr4\";\n\n\nimport { PrimaryExpressionContext } from \"./CParser\";\nimport { PostfixExpressionContext } from \"./CParser\";\nimport { ArgumentExpressionListContext } from \"./CParser\";\nimport { UnaryExpressionContext } from \"./CParser\";\nimport { UnaryOperatorContext } from \"./CParser\";\nimport { CastExpressionContext } from \"./CParser\";\nimport { MultiplicativeExpressionContext } from \"./CParser\";\nimport { AdditiveExpressionContext } from \"./CParser\";\nimport { ShiftExpressionContext } from \"./CParser\";\nimport { RelationalExpressionContext } from \"./CParser\";\nimport { EqualityExpressionContext } from \"./CParser\";\nimport { AndExpressionContext } from \"./CParser\";\nimport { ExclusiveOrExpressionContext } from \"./CParser\";\nimport { InclusiveOrExpressionContext } from \"./CParser\";\nimport { LogicalAndExpressionContext } from \"./CParser\";\nimport { LogicalOrExpressionContext } from \"./CParser\";\nimport { ConditionalExpressionContext } from \"./CParser\";\nimport { AssignmentExpressionContext } from \"./CParser\";\nimport { AssignmentOperatorContext } from \"./CParser\";\nimport { ExpressionContext } from \"./CParser\";\nimport { ConstantExpressionContext } from \"./CParser\";\nimport { DeclarationContext } from \"./CParser\";\nimport { DeclarationSpecifiersContext } from \"./CParser\";\nimport { DeclarationSpecifiers2Context } from \"./CParser\";\nimport { DeclarationSpecifierContext } from \"./CParser\";\nimport { InitDeclaratorListContext } from \"./CParser\";\nimport { InitDeclaratorContext } from \"./CParser\";\nimport { StorageClassSpecifierContext } from \"./CParser\";\nimport { TypeSpecifierContext } from \"./CParser\";\nimport { StructOrUnionSpecifierContext } from \"./CParser\";\nimport { StructOrUnionContext } from \"./CParser\";\nimport { StructDeclarationListContext } from \"./CParser\";\nimport { StructDeclarationContext } from \"./CParser\";\nimport { SpecifierQualifierListContext } from \"./CParser\";\nimport { StructDeclaratorListContext } from \"./CParser\";\nimport { StructDeclaratorContext } from \"./CParser\";\nimport { EnumSpecifierContext } from \"./CParser\";\nimport { EnumeratorListContext } from \"./CParser\";\nimport { EnumeratorContext } from \"./CParser\";\nimport { EnumerationConstantContext } from \"./CParser\";\nimport { DeclaratorContext } from \"./CParser\";\nimport { DirectDeclaratorContext } from \"./CParser\";\nimport { NestedParenthesesBlockContext } from \"./CParser\";\nimport { PointerContext } from \"./CParser\";\nimport { ParameterListContext } from \"./CParser\";\nimport { ParameterDeclarationContext } from \"./CParser\";\nimport { IdentifierListContext } from \"./CParser\";\nimport { TypeNameContext } from \"./CParser\";\nimport { TypedefNameContext } from \"./CParser\";\nimport { InitializerContext } from \"./CParser\";\nimport { InitializerListContext } from \"./CParser\";\nimport { DesignationContext } from \"./CParser\";\nimport { DesignatorListContext } from \"./CParser\";\nimport { DesignatorContext } from \"./CParser\";\nimport { StatementContext } from \"./CParser\";\nimport { LabeledStatementContext } from \"./CParser\";\nimport { CompoundStatementContext } from \"./CParser\";\nimport { BlockItemListContext } from \"./CParser\";\nimport { BlockItemContext } from \"./CParser\";\nimport { ExpressionStatementContext } from \"./CParser\";\nimport { SelectionStatementContext } from \"./CParser\";\nimport { IterationStatementContext } from \"./CParser\";\nimport { ForConditionContext } from \"./CParser\";\nimport { ForDeclarationContext } from \"./CParser\";\nimport { ForExpressionContext } from \"./CParser\";\nimport { JumpStatementContext } from \"./CParser\";\nimport { CompilationUnitContext } from \"./CParser\";\nimport { ExternalDeclarationContext } from \"./CParser\";\nimport { FunctionDefinitionContext } from \"./CParser\";\nimport { DeclarationListContext } from \"./CParser\";\n\n\n/**\n * This interface defines a complete listener for a parse tree produced by\n * `CParser`.\n */\nexport default class CListener extends ParseTreeListener {\n\t/**\n\t * Enter a parse tree produced by `CParser.primaryExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterPrimaryExpression?: (ctx: PrimaryExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.primaryExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitPrimaryExpression?: (ctx: PrimaryExpressionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.postfixExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterPostfixExpression?: (ctx: PostfixExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.postfixExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitPostfixExpression?: (ctx: PostfixExpressionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.argumentExpressionList`.\n\t * @param ctx the parse tree\n\t */\n\tenterArgumentExpressionList?: (ctx: ArgumentExpressionListContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.argumentExpressionList`.\n\t * @param ctx the parse tree\n\t */\n\texitArgumentExpressionList?: (ctx: ArgumentExpressionListContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.unaryExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterUnaryExpression?: (ctx: UnaryExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.unaryExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitUnaryExpression?: (ctx: UnaryExpressionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.unaryOperator`.\n\t * @param ctx the parse tree\n\t */\n\tenterUnaryOperator?: (ctx: UnaryOperatorContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.unaryOperator`.\n\t * @param ctx the parse tree\n\t */\n\texitUnaryOperator?: (ctx: UnaryOperatorContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.castExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterCastExpression?: (ctx: CastExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.castExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitCastExpression?: (ctx: CastExpressionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.multiplicativeExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterMultiplicativeExpression?: (ctx: MultiplicativeExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.multiplicativeExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitMultiplicativeExpression?: (ctx: MultiplicativeExpressionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.additiveExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterAdditiveExpression?: (ctx: AdditiveExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.additiveExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitAdditiveExpression?: (ctx: AdditiveExpressionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.shiftExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterShiftExpression?: (ctx: ShiftExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.shiftExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitShiftExpression?: (ctx: ShiftExpressionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.relationalExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterRelationalExpression?: (ctx: RelationalExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.relationalExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitRelationalExpression?: (ctx: RelationalExpressionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.equalityExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterEqualityExpression?: (ctx: EqualityExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.equalityExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitEqualityExpression?: (ctx: EqualityExpressionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.andExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterAndExpression?: (ctx: AndExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.andExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitAndExpression?: (ctx: AndExpressionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.exclusiveOrExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterExclusiveOrExpression?: (ctx: ExclusiveOrExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.exclusiveOrExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitExclusiveOrExpression?: (ctx: ExclusiveOrExpressionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.inclusiveOrExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterInclusiveOrExpression?: (ctx: InclusiveOrExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.inclusiveOrExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitInclusiveOrExpression?: (ctx: InclusiveOrExpressionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.logicalAndExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterLogicalAndExpression?: (ctx: LogicalAndExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.logicalAndExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitLogicalAndExpression?: (ctx: LogicalAndExpressionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.logicalOrExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterLogicalOrExpression?: (ctx: LogicalOrExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.logicalOrExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitLogicalOrExpression?: (ctx: LogicalOrExpressionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.conditionalExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterConditionalExpression?: (ctx: ConditionalExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.conditionalExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitConditionalExpression?: (ctx: ConditionalExpressionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.assignmentExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterAssignmentExpression?: (ctx: AssignmentExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.assignmentExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitAssignmentExpression?: (ctx: AssignmentExpressionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.assignmentOperator`.\n\t * @param ctx the parse tree\n\t */\n\tenterAssignmentOperator?: (ctx: AssignmentOperatorContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.assignmentOperator`.\n\t * @param ctx the parse tree\n\t */\n\texitAssignmentOperator?: (ctx: AssignmentOperatorContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\tenterExpression?: (ctx: ExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.expression`.\n\t * @param ctx the parse tree\n\t */\n\texitExpression?: (ctx: ExpressionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.constantExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterConstantExpression?: (ctx: ConstantExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.constantExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitConstantExpression?: (ctx: ConstantExpressionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.declaration`.\n\t * @param ctx the parse tree\n\t */\n\tenterDeclaration?: (ctx: DeclarationContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.declaration`.\n\t * @param ctx the parse tree\n\t */\n\texitDeclaration?: (ctx: DeclarationContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.declarationSpecifiers`.\n\t * @param ctx the parse tree\n\t */\n\tenterDeclarationSpecifiers?: (ctx: DeclarationSpecifiersContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.declarationSpecifiers`.\n\t * @param ctx the parse tree\n\t */\n\texitDeclarationSpecifiers?: (ctx: DeclarationSpecifiersContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.declarationSpecifiers2`.\n\t * @param ctx the parse tree\n\t */\n\tenterDeclarationSpecifiers2?: (ctx: DeclarationSpecifiers2Context) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.declarationSpecifiers2`.\n\t * @param ctx the parse tree\n\t */\n\texitDeclarationSpecifiers2?: (ctx: DeclarationSpecifiers2Context) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.declarationSpecifier`.\n\t * @param ctx the parse tree\n\t */\n\tenterDeclarationSpecifier?: (ctx: DeclarationSpecifierContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.declarationSpecifier`.\n\t * @param ctx the parse tree\n\t */\n\texitDeclarationSpecifier?: (ctx: DeclarationSpecifierContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.initDeclaratorList`.\n\t * @param ctx the parse tree\n\t */\n\tenterInitDeclaratorList?: (ctx: InitDeclaratorListContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.initDeclaratorList`.\n\t * @param ctx the parse tree\n\t */\n\texitInitDeclaratorList?: (ctx: InitDeclaratorListContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.initDeclarator`.\n\t * @param ctx the parse tree\n\t */\n\tenterInitDeclarator?: (ctx: InitDeclaratorContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.initDeclarator`.\n\t * @param ctx the parse tree\n\t */\n\texitInitDeclarator?: (ctx: InitDeclaratorContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.storageClassSpecifier`.\n\t * @param ctx the parse tree\n\t */\n\tenterStorageClassSpecifier?: (ctx: StorageClassSpecifierContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.storageClassSpecifier`.\n\t * @param ctx the parse tree\n\t */\n\texitStorageClassSpecifier?: (ctx: StorageClassSpecifierContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.typeSpecifier`.\n\t * @param ctx the parse tree\n\t */\n\tenterTypeSpecifier?: (ctx: TypeSpecifierContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.typeSpecifier`.\n\t * @param ctx the parse tree\n\t */\n\texitTypeSpecifier?: (ctx: TypeSpecifierContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.structOrUnionSpecifier`.\n\t * @param ctx the parse tree\n\t */\n\tenterStructOrUnionSpecifier?: (ctx: StructOrUnionSpecifierContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.structOrUnionSpecifier`.\n\t * @param ctx the parse tree\n\t */\n\texitStructOrUnionSpecifier?: (ctx: StructOrUnionSpecifierContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.structOrUnion`.\n\t * @param ctx the parse tree\n\t */\n\tenterStructOrUnion?: (ctx: StructOrUnionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.structOrUnion`.\n\t * @param ctx the parse tree\n\t */\n\texitStructOrUnion?: (ctx: StructOrUnionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.structDeclarationList`.\n\t * @param ctx the parse tree\n\t */\n\tenterStructDeclarationList?: (ctx: StructDeclarationListContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.structDeclarationList`.\n\t * @param ctx the parse tree\n\t */\n\texitStructDeclarationList?: (ctx: StructDeclarationListContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.structDeclaration`.\n\t * @param ctx the parse tree\n\t */\n\tenterStructDeclaration?: (ctx: StructDeclarationContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.structDeclaration`.\n\t * @param ctx the parse tree\n\t */\n\texitStructDeclaration?: (ctx: StructDeclarationContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.specifierQualifierList`.\n\t * @param ctx the parse tree\n\t */\n\tenterSpecifierQualifierList?: (ctx: SpecifierQualifierListContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.specifierQualifierList`.\n\t * @param ctx the parse tree\n\t */\n\texitSpecifierQualifierList?: (ctx: SpecifierQualifierListContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.structDeclaratorList`.\n\t * @param ctx the parse tree\n\t */\n\tenterStructDeclaratorList?: (ctx: StructDeclaratorListContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.structDeclaratorList`.\n\t * @param ctx the parse tree\n\t */\n\texitStructDeclaratorList?: (ctx: StructDeclaratorListContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.structDeclarator`.\n\t * @param ctx the parse tree\n\t */\n\tenterStructDeclarator?: (ctx: StructDeclaratorContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.structDeclarator`.\n\t * @param ctx the parse tree\n\t */\n\texitStructDeclarator?: (ctx: StructDeclaratorContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.enumSpecifier`.\n\t * @param ctx the parse tree\n\t */\n\tenterEnumSpecifier?: (ctx: EnumSpecifierContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.enumSpecifier`.\n\t * @param ctx the parse tree\n\t */\n\texitEnumSpecifier?: (ctx: EnumSpecifierContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.enumeratorList`.\n\t * @param ctx the parse tree\n\t */\n\tenterEnumeratorList?: (ctx: EnumeratorListContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.enumeratorList`.\n\t * @param ctx the parse tree\n\t */\n\texitEnumeratorList?: (ctx: EnumeratorListContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.enumerator`.\n\t * @param ctx the parse tree\n\t */\n\tenterEnumerator?: (ctx: EnumeratorContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.enumerator`.\n\t * @param ctx the parse tree\n\t */\n\texitEnumerator?: (ctx: EnumeratorContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.enumerationConstant`.\n\t * @param ctx the parse tree\n\t */\n\tenterEnumerationConstant?: (ctx: EnumerationConstantContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.enumerationConstant`.\n\t * @param ctx the parse tree\n\t */\n\texitEnumerationConstant?: (ctx: EnumerationConstantContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.declarator`.\n\t * @param ctx the parse tree\n\t */\n\tenterDeclarator?: (ctx: DeclaratorContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.declarator`.\n\t * @param ctx the parse tree\n\t */\n\texitDeclarator?: (ctx: DeclaratorContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.directDeclarator`.\n\t * @param ctx the parse tree\n\t */\n\tenterDirectDeclarator?: (ctx: DirectDeclaratorContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.directDeclarator`.\n\t * @param ctx the parse tree\n\t */\n\texitDirectDeclarator?: (ctx: DirectDeclaratorContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.nestedParenthesesBlock`.\n\t * @param ctx the parse tree\n\t */\n\tenterNestedParenthesesBlock?: (ctx: NestedParenthesesBlockContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.nestedParenthesesBlock`.\n\t * @param ctx the parse tree\n\t */\n\texitNestedParenthesesBlock?: (ctx: NestedParenthesesBlockContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.pointer`.\n\t * @param ctx the parse tree\n\t */\n\tenterPointer?: (ctx: PointerContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.pointer`.\n\t * @param ctx the parse tree\n\t */\n\texitPointer?: (ctx: PointerContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.parameterList`.\n\t * @param ctx the parse tree\n\t */\n\tenterParameterList?: (ctx: ParameterListContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.parameterList`.\n\t * @param ctx the parse tree\n\t */\n\texitParameterList?: (ctx: ParameterListContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.parameterDeclaration`.\n\t * @param ctx the parse tree\n\t */\n\tenterParameterDeclaration?: (ctx: ParameterDeclarationContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.parameterDeclaration`.\n\t * @param ctx the parse tree\n\t */\n\texitParameterDeclaration?: (ctx: ParameterDeclarationContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.identifierList`.\n\t * @param ctx the parse tree\n\t */\n\tenterIdentifierList?: (ctx: IdentifierListContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.identifierList`.\n\t * @param ctx the parse tree\n\t */\n\texitIdentifierList?: (ctx: IdentifierListContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.typeName`.\n\t * @param ctx the parse tree\n\t */\n\tenterTypeName?: (ctx: TypeNameContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.typeName`.\n\t * @param ctx the parse tree\n\t */\n\texitTypeName?: (ctx: TypeNameContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.typedefName`.\n\t * @param ctx the parse tree\n\t */\n\tenterTypedefName?: (ctx: TypedefNameContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.typedefName`.\n\t * @param ctx the parse tree\n\t */\n\texitTypedefName?: (ctx: TypedefNameContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.initializer`.\n\t * @param ctx the parse tree\n\t */\n\tenterInitializer?: (ctx: InitializerContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.initializer`.\n\t * @param ctx the parse tree\n\t */\n\texitInitializer?: (ctx: InitializerContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.initializerList`.\n\t * @param ctx the parse tree\n\t */\n\tenterInitializerList?: (ctx: InitializerListContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.initializerList`.\n\t * @param ctx the parse tree\n\t */\n\texitInitializerList?: (ctx: InitializerListContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.designation`.\n\t * @param ctx the parse tree\n\t */\n\tenterDesignation?: (ctx: DesignationContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.designation`.\n\t * @param ctx the parse tree\n\t */\n\texitDesignation?: (ctx: DesignationContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.designatorList`.\n\t * @param ctx the parse tree\n\t */\n\tenterDesignatorList?: (ctx: DesignatorListContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.designatorList`.\n\t * @param ctx the parse tree\n\t */\n\texitDesignatorList?: (ctx: DesignatorListContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.designator`.\n\t * @param ctx the parse tree\n\t */\n\tenterDesignator?: (ctx: DesignatorContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.designator`.\n\t * @param ctx the parse tree\n\t */\n\texitDesignator?: (ctx: DesignatorContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\tenterStatement?: (ctx: StatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.statement`.\n\t * @param ctx the parse tree\n\t */\n\texitStatement?: (ctx: StatementContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.labeledStatement`.\n\t * @param ctx the parse tree\n\t */\n\tenterLabeledStatement?: (ctx: LabeledStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.labeledStatement`.\n\t * @param ctx the parse tree\n\t */\n\texitLabeledStatement?: (ctx: LabeledStatementContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.compoundStatement`.\n\t * @param ctx the parse tree\n\t */\n\tenterCompoundStatement?: (ctx: CompoundStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.compoundStatement`.\n\t * @param ctx the parse tree\n\t */\n\texitCompoundStatement?: (ctx: CompoundStatementContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.blockItemList`.\n\t * @param ctx the parse tree\n\t */\n\tenterBlockItemList?: (ctx: BlockItemListContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.blockItemList`.\n\t * @param ctx the parse tree\n\t */\n\texitBlockItemList?: (ctx: BlockItemListContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.blockItem`.\n\t * @param ctx the parse tree\n\t */\n\tenterBlockItem?: (ctx: BlockItemContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.blockItem`.\n\t * @param ctx the parse tree\n\t */\n\texitBlockItem?: (ctx: BlockItemContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.expressionStatement`.\n\t * @param ctx the parse tree\n\t */\n\tenterExpressionStatement?: (ctx: ExpressionStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.expressionStatement`.\n\t * @param ctx the parse tree\n\t */\n\texitExpressionStatement?: (ctx: ExpressionStatementContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.selectionStatement`.\n\t * @param ctx the parse tree\n\t */\n\tenterSelectionStatement?: (ctx: SelectionStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.selectionStatement`.\n\t * @param ctx the parse tree\n\t */\n\texitSelectionStatement?: (ctx: SelectionStatementContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.iterationStatement`.\n\t * @param ctx the parse tree\n\t */\n\tenterIterationStatement?: (ctx: IterationStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.iterationStatement`.\n\t * @param ctx the parse tree\n\t */\n\texitIterationStatement?: (ctx: IterationStatementContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.forCondition`.\n\t * @param ctx the parse tree\n\t */\n\tenterForCondition?: (ctx: ForConditionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.forCondition`.\n\t * @param ctx the parse tree\n\t */\n\texitForCondition?: (ctx: ForConditionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.forDeclaration`.\n\t * @param ctx the parse tree\n\t */\n\tenterForDeclaration?: (ctx: ForDeclarationContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.forDeclaration`.\n\t * @param ctx the parse tree\n\t */\n\texitForDeclaration?: (ctx: ForDeclarationContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.forExpression`.\n\t * @param ctx the parse tree\n\t */\n\tenterForExpression?: (ctx: ForExpressionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.forExpression`.\n\t * @param ctx the parse tree\n\t */\n\texitForExpression?: (ctx: ForExpressionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.jumpStatement`.\n\t * @param ctx the parse tree\n\t */\n\tenterJumpStatement?: (ctx: JumpStatementContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.jumpStatement`.\n\t * @param ctx the parse tree\n\t */\n\texitJumpStatement?: (ctx: JumpStatementContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.compilationUnit`.\n\t * @param ctx the parse tree\n\t */\n\tenterCompilationUnit?: (ctx: CompilationUnitContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.compilationUnit`.\n\t * @param ctx the parse tree\n\t */\n\texitCompilationUnit?: (ctx: CompilationUnitContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.externalDeclaration`.\n\t * @param ctx the parse tree\n\t */\n\tenterExternalDeclaration?: (ctx: ExternalDeclarationContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.externalDeclaration`.\n\t * @param ctx the parse tree\n\t */\n\texitExternalDeclaration?: (ctx: ExternalDeclarationContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.functionDefinition`.\n\t * @param ctx the parse tree\n\t */\n\tenterFunctionDefinition?: (ctx: FunctionDefinitionContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.functionDefinition`.\n\t * @param ctx the parse tree\n\t */\n\texitFunctionDefinition?: (ctx: FunctionDefinitionContext) => void;\n\t/**\n\t * Enter a parse tree produced by `CParser.declarationList`.\n\t * @param ctx the parse tree\n\t */\n\tenterDeclarationList?: (ctx: DeclarationListContext) => void;\n\t/**\n\t * Exit a parse tree produced by `CParser.declarationList`.\n\t * @param ctx the parse tree\n\t */\n\texitDeclarationList?: (ctx: DeclarationListContext) => void;\n}\n\n"]}