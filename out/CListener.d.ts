import { ParseTreeListener } from "antlr4";
import { PrimaryExpressionContext } from "./CParser";
import { PostfixExpressionContext } from "./CParser";
import { ArgumentExpressionListContext } from "./CParser";
import { UnaryExpressionContext } from "./CParser";
import { UnaryOperatorContext } from "./CParser";
import { CastExpressionContext } from "./CParser";
import { MultiplicativeExpressionContext } from "./CParser";
import { AdditiveExpressionContext } from "./CParser";
import { ShiftExpressionContext } from "./CParser";
import { RelationalExpressionContext } from "./CParser";
import { EqualityExpressionContext } from "./CParser";
import { AndExpressionContext } from "./CParser";
import { ExclusiveOrExpressionContext } from "./CParser";
import { InclusiveOrExpressionContext } from "./CParser";
import { LogicalAndExpressionContext } from "./CParser";
import { LogicalOrExpressionContext } from "./CParser";
import { ConditionalExpressionContext } from "./CParser";
import { AssignmentExpressionContext } from "./CParser";
import { AssignmentOperatorContext } from "./CParser";
import { ExpressionContext } from "./CParser";
import { ConstantExpressionContext } from "./CParser";
import { DeclarationContext } from "./CParser";
import { DeclarationSpecifiersContext } from "./CParser";
import { DeclarationSpecifiers2Context } from "./CParser";
import { DeclarationSpecifierContext } from "./CParser";
import { InitDeclaratorListContext } from "./CParser";
import { InitDeclaratorContext } from "./CParser";
import { StorageClassSpecifierContext } from "./CParser";
import { TypeSpecifierContext } from "./CParser";
import { StructOrUnionSpecifierContext } from "./CParser";
import { StructOrUnionContext } from "./CParser";
import { StructDeclarationListContext } from "./CParser";
import { StructDeclarationContext } from "./CParser";
import { SpecifierQualifierListContext } from "./CParser";
import { StructDeclaratorListContext } from "./CParser";
import { StructDeclaratorContext } from "./CParser";
import { EnumSpecifierContext } from "./CParser";
import { EnumeratorListContext } from "./CParser";
import { EnumeratorContext } from "./CParser";
import { EnumerationConstantContext } from "./CParser";
import { DeclaratorContext } from "./CParser";
import { DirectDeclaratorContext } from "./CParser";
import { NestedParenthesesBlockContext } from "./CParser";
import { PointerContext } from "./CParser";
import { ParameterListContext } from "./CParser";
import { ParameterDeclarationContext } from "./CParser";
import { IdentifierListContext } from "./CParser";
import { TypeNameContext } from "./CParser";
import { TypedefNameContext } from "./CParser";
import { InitializerContext } from "./CParser";
import { InitializerListContext } from "./CParser";
import { DesignationContext } from "./CParser";
import { DesignatorListContext } from "./CParser";
import { DesignatorContext } from "./CParser";
import { StatementContext } from "./CParser";
import { LabeledStatementContext } from "./CParser";
import { CompoundStatementContext } from "./CParser";
import { BlockItemListContext } from "./CParser";
import { BlockItemContext } from "./CParser";
import { ExpressionStatementContext } from "./CParser";
import { SelectionStatementContext } from "./CParser";
import { IterationStatementContext } from "./CParser";
import { ForConditionContext } from "./CParser";
import { ForDeclarationContext } from "./CParser";
import { ForExpressionContext } from "./CParser";
import { JumpStatementContext } from "./CParser";
import { CompilationUnitContext } from "./CParser";
import { ExternalDeclarationContext } from "./CParser";
import { FunctionDefinitionContext } from "./CParser";
import { DeclarationListContext } from "./CParser";
export default class CListener extends ParseTreeListener {
    enterPrimaryExpression?: (ctx: PrimaryExpressionContext) => void;
    exitPrimaryExpression?: (ctx: PrimaryExpressionContext) => void;
    enterPostfixExpression?: (ctx: PostfixExpressionContext) => void;
    exitPostfixExpression?: (ctx: PostfixExpressionContext) => void;
    enterArgumentExpressionList?: (ctx: ArgumentExpressionListContext) => void;
    exitArgumentExpressionList?: (ctx: ArgumentExpressionListContext) => void;
    enterUnaryExpression?: (ctx: UnaryExpressionContext) => void;
    exitUnaryExpression?: (ctx: UnaryExpressionContext) => void;
    enterUnaryOperator?: (ctx: UnaryOperatorContext) => void;
    exitUnaryOperator?: (ctx: UnaryOperatorContext) => void;
    enterCastExpression?: (ctx: CastExpressionContext) => void;
    exitCastExpression?: (ctx: CastExpressionContext) => void;
    enterMultiplicativeExpression?: (ctx: MultiplicativeExpressionContext) => void;
    exitMultiplicativeExpression?: (ctx: MultiplicativeExpressionContext) => void;
    enterAdditiveExpression?: (ctx: AdditiveExpressionContext) => void;
    exitAdditiveExpression?: (ctx: AdditiveExpressionContext) => void;
    enterShiftExpression?: (ctx: ShiftExpressionContext) => void;
    exitShiftExpression?: (ctx: ShiftExpressionContext) => void;
    enterRelationalExpression?: (ctx: RelationalExpressionContext) => void;
    exitRelationalExpression?: (ctx: RelationalExpressionContext) => void;
    enterEqualityExpression?: (ctx: EqualityExpressionContext) => void;
    exitEqualityExpression?: (ctx: EqualityExpressionContext) => void;
    enterAndExpression?: (ctx: AndExpressionContext) => void;
    exitAndExpression?: (ctx: AndExpressionContext) => void;
    enterExclusiveOrExpression?: (ctx: ExclusiveOrExpressionContext) => void;
    exitExclusiveOrExpression?: (ctx: ExclusiveOrExpressionContext) => void;
    enterInclusiveOrExpression?: (ctx: InclusiveOrExpressionContext) => void;
    exitInclusiveOrExpression?: (ctx: InclusiveOrExpressionContext) => void;
    enterLogicalAndExpression?: (ctx: LogicalAndExpressionContext) => void;
    exitLogicalAndExpression?: (ctx: LogicalAndExpressionContext) => void;
    enterLogicalOrExpression?: (ctx: LogicalOrExpressionContext) => void;
    exitLogicalOrExpression?: (ctx: LogicalOrExpressionContext) => void;
    enterConditionalExpression?: (ctx: ConditionalExpressionContext) => void;
    exitConditionalExpression?: (ctx: ConditionalExpressionContext) => void;
    enterAssignmentExpression?: (ctx: AssignmentExpressionContext) => void;
    exitAssignmentExpression?: (ctx: AssignmentExpressionContext) => void;
    enterAssignmentOperator?: (ctx: AssignmentOperatorContext) => void;
    exitAssignmentOperator?: (ctx: AssignmentOperatorContext) => void;
    enterExpression?: (ctx: ExpressionContext) => void;
    exitExpression?: (ctx: ExpressionContext) => void;
    enterConstantExpression?: (ctx: ConstantExpressionContext) => void;
    exitConstantExpression?: (ctx: ConstantExpressionContext) => void;
    enterDeclaration?: (ctx: DeclarationContext) => void;
    exitDeclaration?: (ctx: DeclarationContext) => void;
    enterDeclarationSpecifiers?: (ctx: DeclarationSpecifiersContext) => void;
    exitDeclarationSpecifiers?: (ctx: DeclarationSpecifiersContext) => void;
    enterDeclarationSpecifiers2?: (ctx: DeclarationSpecifiers2Context) => void;
    exitDeclarationSpecifiers2?: (ctx: DeclarationSpecifiers2Context) => void;
    enterDeclarationSpecifier?: (ctx: DeclarationSpecifierContext) => void;
    exitDeclarationSpecifier?: (ctx: DeclarationSpecifierContext) => void;
    enterInitDeclaratorList?: (ctx: InitDeclaratorListContext) => void;
    exitInitDeclaratorList?: (ctx: InitDeclaratorListContext) => void;
    enterInitDeclarator?: (ctx: InitDeclaratorContext) => void;
    exitInitDeclarator?: (ctx: InitDeclaratorContext) => void;
    enterStorageClassSpecifier?: (ctx: StorageClassSpecifierContext) => void;
    exitStorageClassSpecifier?: (ctx: StorageClassSpecifierContext) => void;
    enterTypeSpecifier?: (ctx: TypeSpecifierContext) => void;
    exitTypeSpecifier?: (ctx: TypeSpecifierContext) => void;
    enterStructOrUnionSpecifier?: (ctx: StructOrUnionSpecifierContext) => void;
    exitStructOrUnionSpecifier?: (ctx: StructOrUnionSpecifierContext) => void;
    enterStructOrUnion?: (ctx: StructOrUnionContext) => void;
    exitStructOrUnion?: (ctx: StructOrUnionContext) => void;
    enterStructDeclarationList?: (ctx: StructDeclarationListContext) => void;
    exitStructDeclarationList?: (ctx: StructDeclarationListContext) => void;
    enterStructDeclaration?: (ctx: StructDeclarationContext) => void;
    exitStructDeclaration?: (ctx: StructDeclarationContext) => void;
    enterSpecifierQualifierList?: (ctx: SpecifierQualifierListContext) => void;
    exitSpecifierQualifierList?: (ctx: SpecifierQualifierListContext) => void;
    enterStructDeclaratorList?: (ctx: StructDeclaratorListContext) => void;
    exitStructDeclaratorList?: (ctx: StructDeclaratorListContext) => void;
    enterStructDeclarator?: (ctx: StructDeclaratorContext) => void;
    exitStructDeclarator?: (ctx: StructDeclaratorContext) => void;
    enterEnumSpecifier?: (ctx: EnumSpecifierContext) => void;
    exitEnumSpecifier?: (ctx: EnumSpecifierContext) => void;
    enterEnumeratorList?: (ctx: EnumeratorListContext) => void;
    exitEnumeratorList?: (ctx: EnumeratorListContext) => void;
    enterEnumerator?: (ctx: EnumeratorContext) => void;
    exitEnumerator?: (ctx: EnumeratorContext) => void;
    enterEnumerationConstant?: (ctx: EnumerationConstantContext) => void;
    exitEnumerationConstant?: (ctx: EnumerationConstantContext) => void;
    enterDeclarator?: (ctx: DeclaratorContext) => void;
    exitDeclarator?: (ctx: DeclaratorContext) => void;
    enterDirectDeclarator?: (ctx: DirectDeclaratorContext) => void;
    exitDirectDeclarator?: (ctx: DirectDeclaratorContext) => void;
    enterNestedParenthesesBlock?: (ctx: NestedParenthesesBlockContext) => void;
    exitNestedParenthesesBlock?: (ctx: NestedParenthesesBlockContext) => void;
    enterPointer?: (ctx: PointerContext) => void;
    exitPointer?: (ctx: PointerContext) => void;
    enterParameterList?: (ctx: ParameterListContext) => void;
    exitParameterList?: (ctx: ParameterListContext) => void;
    enterParameterDeclaration?: (ctx: ParameterDeclarationContext) => void;
    exitParameterDeclaration?: (ctx: ParameterDeclarationContext) => void;
    enterIdentifierList?: (ctx: IdentifierListContext) => void;
    exitIdentifierList?: (ctx: IdentifierListContext) => void;
    enterTypeName?: (ctx: TypeNameContext) => void;
    exitTypeName?: (ctx: TypeNameContext) => void;
    enterTypedefName?: (ctx: TypedefNameContext) => void;
    exitTypedefName?: (ctx: TypedefNameContext) => void;
    enterInitializer?: (ctx: InitializerContext) => void;
    exitInitializer?: (ctx: InitializerContext) => void;
    enterInitializerList?: (ctx: InitializerListContext) => void;
    exitInitializerList?: (ctx: InitializerListContext) => void;
    enterDesignation?: (ctx: DesignationContext) => void;
    exitDesignation?: (ctx: DesignationContext) => void;
    enterDesignatorList?: (ctx: DesignatorListContext) => void;
    exitDesignatorList?: (ctx: DesignatorListContext) => void;
    enterDesignator?: (ctx: DesignatorContext) => void;
    exitDesignator?: (ctx: DesignatorContext) => void;
    enterStatement?: (ctx: StatementContext) => void;
    exitStatement?: (ctx: StatementContext) => void;
    enterLabeledStatement?: (ctx: LabeledStatementContext) => void;
    exitLabeledStatement?: (ctx: LabeledStatementContext) => void;
    enterCompoundStatement?: (ctx: CompoundStatementContext) => void;
    exitCompoundStatement?: (ctx: CompoundStatementContext) => void;
    enterBlockItemList?: (ctx: BlockItemListContext) => void;
    exitBlockItemList?: (ctx: BlockItemListContext) => void;
    enterBlockItem?: (ctx: BlockItemContext) => void;
    exitBlockItem?: (ctx: BlockItemContext) => void;
    enterExpressionStatement?: (ctx: ExpressionStatementContext) => void;
    exitExpressionStatement?: (ctx: ExpressionStatementContext) => void;
    enterSelectionStatement?: (ctx: SelectionStatementContext) => void;
    exitSelectionStatement?: (ctx: SelectionStatementContext) => void;
    enterIterationStatement?: (ctx: IterationStatementContext) => void;
    exitIterationStatement?: (ctx: IterationStatementContext) => void;
    enterForCondition?: (ctx: ForConditionContext) => void;
    exitForCondition?: (ctx: ForConditionContext) => void;
    enterForDeclaration?: (ctx: ForDeclarationContext) => void;
    exitForDeclaration?: (ctx: ForDeclarationContext) => void;
    enterForExpression?: (ctx: ForExpressionContext) => void;
    exitForExpression?: (ctx: ForExpressionContext) => void;
    enterJumpStatement?: (ctx: JumpStatementContext) => void;
    exitJumpStatement?: (ctx: JumpStatementContext) => void;
    enterCompilationUnit?: (ctx: CompilationUnitContext) => void;
    exitCompilationUnit?: (ctx: CompilationUnitContext) => void;
    enterExternalDeclaration?: (ctx: ExternalDeclarationContext) => void;
    exitExternalDeclaration?: (ctx: ExternalDeclarationContext) => void;
    enterFunctionDefinition?: (ctx: FunctionDefinitionContext) => void;
    exitFunctionDefinition?: (ctx: FunctionDefinitionContext) => void;
    enterDeclarationList?: (ctx: DeclarationListContext) => void;
    exitDeclarationList?: (ctx: DeclarationListContext) => void;
}
